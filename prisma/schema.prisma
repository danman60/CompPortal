generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_clients {
  id                   String                  @id @db.Uuid
  client_secret_hash   String?
  registration_type    oauth_registration_type
  redirect_uris        String
  grant_types          String
  client_name          String?
  client_uri           String?
  logo_uri             String?
  created_at           DateTime                @default(now()) @db.Timestamptz(6)
  updated_at           DateTime                @default(now()) @db.Timestamptz(6)
  deleted_at           DateTime?               @db.Timestamptz(6)
  client_type          oauth_client_type       @default(confidential)
  oauth_authorizations oauth_authorizations[]
  oauth_consents       oauth_consents[]
  sessions             sessions[]

  @@index([deleted_at])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id              String           @id @db.Uuid
  user_id         String           @db.Uuid
  created_at      DateTime?        @db.Timestamptz(6)
  updated_at      DateTime?        @db.Timestamptz(6)
  factor_id       String?          @db.Uuid
  aal             aal_level?
  not_after       DateTime?        @db.Timestamptz(6)
  refreshed_at    DateTime?        @db.Timestamp(6)
  user_agent      String?
  ip              String?          @db.Inet
  tag             String?
  oauth_client_id String?          @db.Uuid
  mfa_amr_claims  mfa_amr_claims[]
  refresh_tokens  refresh_tokens[]
  oauth_clients   oauth_clients?   @relation(fields: [oauth_client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@index([oauth_client_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  disabled          Boolean?
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@index([resource_id], map: "sso_providers_resource_id_pattern_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                                           String?                @db.Uuid
  id                                                    String                 @id @db.Uuid
  aud                                                   String?                @db.VarChar(255)
  role                                                  String?                @db.VarChar(255)
  email                                                 String?                @db.VarChar(255)
  encrypted_password                                    String?                @db.VarChar(255)
  email_confirmed_at                                    DateTime?              @db.Timestamptz(6)
  invited_at                                            DateTime?              @db.Timestamptz(6)
  confirmation_token                                    String?                @db.VarChar(255)
  confirmation_sent_at                                  DateTime?              @db.Timestamptz(6)
  recovery_token                                        String?                @db.VarChar(255)
  recovery_sent_at                                      DateTime?              @db.Timestamptz(6)
  email_change_token_new                                String?                @db.VarChar(255)
  email_change                                          String?                @db.VarChar(255)
  email_change_sent_at                                  DateTime?              @db.Timestamptz(6)
  last_sign_in_at                                       DateTime?              @db.Timestamptz(6)
  raw_app_meta_data                                     Json?
  raw_user_meta_data                                    Json?
  is_super_admin                                        Boolean?
  created_at                                            DateTime?              @db.Timestamptz(6)
  updated_at                                            DateTime?              @db.Timestamptz(6)
  phone                                                 String?                @unique
  phone_confirmed_at                                    DateTime?              @db.Timestamptz(6)
  phone_change                                          String?                @default("")
  phone_change_token                                    String?                @default("") @db.VarChar(255)
  phone_change_sent_at                                  DateTime?              @db.Timestamptz(6)
  confirmed_at                                          DateTime?              @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current                            String?                @default("") @db.VarChar(255)
  email_change_confirm_status                           Int?                   @default(0) @db.SmallInt
  banned_until                                          DateTime?              @db.Timestamptz(6)
  reauthentication_token                                String?                @default("") @db.VarChar(255)
  reauthentication_sent_at                              DateTime?              @db.Timestamptz(6)
  is_sso_user                                           Boolean                @default(false)
  deleted_at                                            DateTime?              @db.Timestamptz(6)
  is_anonymous                                          Boolean                @default(false)
  identities                                            identities[]
  mfa_factors                                           mfa_factors[]
  oauth_authorizations                                  oauth_authorizations[]
  oauth_consents                                        oauth_consents[]
  one_time_tokens                                       one_time_tokens[]
  sessions                                              sessions[]
  capacity_ledger                                       capacity_ledger[]
  competition_sessions                                  competition_sessions[]
  documents                                             documents[]
  email_queue                                           email_queue[]
  judges                                                judges[]
  reservations                                          reservations[]
  reservations_reservations_payment_confirmed_byTousers reservations[]         @relation("reservations_payment_confirmed_byTousers")
  studios_studios_owner_idTousers                       studios[]              @relation("studios_owner_idTousers")
  studios_studios_verified_byTousers                    studios[]              @relation("studios_verified_byTousers")
  user_profiles                                         user_profiles?

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model age_groups {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(100)
  short_name          String?               @db.VarChar(20)
  min_age             Int
  max_age             Int
  competitive_group   String?               @db.VarChar(100)
  dynamic_group       String?               @db.VarChar(100)
  form_grouping       String?               @db.VarChar(100)
  sort_order          Int?
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  tenant_id           String                @db.Uuid
  tenants             tenants               @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition_entries competition_entries[]
  rankings            rankings[]

  @@index([tenant_id], map: "idx_age_groups_tenant")
  @@schema("public")
}

model award_types {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String    @db.VarChar(100)
  description              String?
  category                 String?   @db.VarChar(50)
  color                    String?   @db.VarChar(7)
  icon_name                String?   @db.VarChar(50)
  certificate_template     String?   @db.VarChar(100)
  min_score                Decimal?  @db.Decimal(6, 2)
  requires_minimum_entries Int?
  sort_order               Int?
  is_active                Boolean?  @default(true)
  created_at               DateTime? @default(now()) @db.Timestamp(6)
  tenant_id                String    @db.Uuid
  award_basis              String?   @db.VarChar(50)
  top_n                    Int?
  entry_size_filter        String[]  @db.VarChar(255)
  age_division_filter      String[]  @db.VarChar(255)
  classification_filter    String[]  @db.VarChar(255)
  tenants                  tenants   @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_award_types_tenant")
  awards                   awards[]

  @@unique([tenant_id, name], map: "award_types_tenant_name_unique")
  @@index([tenant_id], map: "idx_award_types_tenant")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model awards {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id      String              @db.Uuid
  entry_id            String              @db.Uuid
  award_type_id       String              @db.Uuid
  placement           Int?
  score               Decimal?            @db.Decimal(6, 2)
  award_category      String?             @db.VarChar(100)
  certificate_url     String?
  trophy_type         String?             @db.VarChar(100)
  special_recognition String?
  presented_at        DateTime?           @db.Timestamp(6)
  presented_by        String?             @db.VarChar(255)
  created_at          DateTime?           @default(now()) @db.Timestamp(6)
  tenant_id           String              @db.Uuid
  award_types         award_types         @relation(fields: [award_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competitions        competitions        @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition_entries competition_entries @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants             tenants             @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_awards_tenant")

  @@index([award_type_id], map: "idx_awards_award_type_id")
  @@index([competition_id], map: "idx_awards_competition_id")
  @@index([entry_id], map: "idx_awards_entry_id")
  @@index([tenant_id], map: "idx_awards_tenant")
  @@index([tenant_id, entry_id], map: "idx_awards_tenant_entry")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model classifications {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                @db.VarChar(100)
  description          String?
  skill_level          Int?
  color_code           String?               @db.VarChar(7)
  min_years_experience Int?
  requires_audition    Boolean?              @default(false)
  entry_requirements   String?
  created_at           DateTime?             @default(now()) @db.Timestamp(6)
  tenant_id            String                @db.Uuid
  tenants              tenants               @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_classifications_tenant")
  competition_entries  competition_entries[]
  rankings             rankings[]

  @@unique([tenant_id, name], name: "classifications_tenant_name_key", map: "classifications_tenant_name_key")
  @@index([tenant_id], map: "idx_classifications_tenant")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model competition_entries {
  id                                                                                   String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id                                                                       String                   @db.Uuid
  reservation_id                                                                       String?                  @db.Uuid
  studio_id                                                                            String                   @db.Uuid
  entry_number                                                                         Int?
  sequence_number                                                                      Int?
  title                                                                                String                   @db.VarChar(255)
  category_id                                                                          String                   @db.Uuid
  classification_id                                                                    String                   @db.Uuid
  age_group_id                                                                         String                   @db.Uuid
  entry_size_category_id                                                               String                   @db.Uuid
  session_id                                                                           String?                  @db.Uuid
  performance_date                                                                     DateTime?                @db.Date
  performance_time                                                                     DateTime?                @db.Time(6)
  duration                                                                             Unsupported("interval")?
  warm_up_time                                                                         DateTime?                @db.Time(6)
  heat                                                                                 String?                  @db.VarChar(50)
  running_order                                                                        Int?
  is_title_upgrade                                                                     Boolean?                 @default(false)
  is_title_interview                                                                   Boolean?                 @default(false)
  is_improvisation                                                                     Boolean?                 @default(false)
  is_glow_off_round                                                                    Boolean?                 @default(false)
  is_overall_competition                                                               Boolean?                 @default(false)
  previous_entry_id                                                                    String?                  @db.Uuid
  next_entry_id                                                                        String?                  @db.Uuid
  music_title                                                                          String?                  @db.VarChar(255)
  music_artist                                                                         String?                  @db.VarChar(255)
  music_duration                                                                       Unsupported("interval")?
  music_file_url                                                                       String?
  special_requirements                                                                 String?
  entry_fee                                                                            Decimal?                 @db.Decimal(10, 2)
  late_fee                                                                             Decimal?                 @default(0) @db.Decimal(10, 2)
  total_fee                                                                            Decimal?                 @db.Decimal(10, 2)
  status                                                                               String?                  @default("registered") @db.VarChar(50)
  choreographer                                                                        String?                  @db.VarChar(255)
  costume_description                                                                  String?
  props_required                                                                       String?
  accessibility_needs                                                                  String?
  created_at                                                                           DateTime?                @default(now()) @db.Timestamp(6)
  updated_at                                                                           DateTime?                @default(now()) @db.Timestamp(6)
  entry_suffix                                                                         String?                  @db.VarChar(5)
  is_late_entry                                                                        Boolean?                 @default(false)
  calculated_score                                                                     Decimal?                 @db.Decimal(5, 2)
  award_level                                                                          String?                  @db.VarChar(50)
  category_placement                                                                   Int?
  tenant_id                                                                            String                   @db.Uuid
  routine_number                                                                       Int?
  awards                                                                               awards[]
  age_groups                                                                           age_groups               @relation(fields: [age_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dance_categories                                                                     dance_categories         @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classifications                                                                      classifications          @relation(fields: [classification_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competitions                                                                         competitions             @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  entry_size_categories                                                                entry_size_categories    @relation(fields: [entry_size_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competition_entries_competition_entries_next_entry_idTocompetition_entries           competition_entries?     @relation("competition_entries_next_entry_idTocompetition_entries", fields: [next_entry_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_competition_entries_competition_entries_next_entry_idTocompetition_entries     competition_entries[]    @relation("competition_entries_next_entry_idTocompetition_entries")
  competition_entries_competition_entries_previous_entry_idTocompetition_entries       competition_entries?     @relation("competition_entries_previous_entry_idTocompetition_entries", fields: [previous_entry_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_competition_entries_competition_entries_previous_entry_idTocompetition_entries competition_entries[]    @relation("competition_entries_previous_entry_idTocompetition_entries")
  reservations                                                                         reservations?            @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition_sessions                                                                 competition_sessions?    @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studios                                                                              studios                  @relation(fields: [studio_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants                                                                              tenants                  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  documents                                                                            documents[]
  entry_participants                                                                   entry_participants[]
  rankings                                                                             rankings[]
  scores                                                                               scores[]
  summary_entries                                                                      summary_entries[]

  @@index([competition_id], map: "idx_entries_competition")
  @@index([performance_date, performance_time], map: "idx_entries_performance_time")
  @@index([sequence_number], map: "idx_entries_sequence")
  @@index([session_id], map: "idx_entries_session")
  @@index([studio_id], map: "idx_entries_studio")
  @@index([calculated_score(sort: Desc)], map: "idx_entries_calculated_score")
  @@index([award_level], map: "idx_entries_award_level")
  @@index([category_placement], map: "idx_entries_placement")
  @@index([tenant_id], map: "idx_entries_tenant")
  @@index([age_group_id], map: "idx_competition_entries_age_group_id")
  @@index([category_id], map: "idx_competition_entries_category_id")
  @@index([classification_id], map: "idx_competition_entries_classification_id")
  @@index([entry_size_category_id], map: "idx_competition_entries_entry_size_category_id")
  @@index([next_entry_id], map: "idx_competition_entries_next_entry_id")
  @@index([previous_entry_id], map: "idx_competition_entries_previous_entry_id")
  @@schema("public")
}

model competition_locations {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id         String                 @db.Uuid
  name                   String                 @db.VarChar(255)
  address                String?
  capacity               Int?
  date_start             DateTime?              @db.Date
  date_end               DateTime?              @db.Date
  setup_time             DateTime?              @db.Time(6)
  doors_open             DateTime?              @db.Time(6)
  competition_start      DateTime?              @db.Time(6)
  competition_end        DateTime?              @db.Time(6)
  dressing_rooms         Int?
  warm_up_areas          Int?
  parking_spaces         Int?
  accessibility_features String[]
  stage_dimensions       String?                @db.VarChar(100)
  audio_system           String?
  lighting_system        String?
  video_recording        Boolean?               @default(false)
  live_streaming         Boolean?               @default(false)
  created_at             DateTime?              @default(now()) @db.Timestamp(6)
  tenant_id              String                 @db.Uuid
  competitions           competitions           @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants                tenants                @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_competition_locations_tenant")
  competition_sessions   competition_sessions[]
  reservations           reservations[]

  @@index([competition_id], map: "idx_competition_locations_competition_id")
  @@index([tenant_id], map: "idx_competition_locations_tenant")
  @@index([tenant_id, competition_id], map: "idx_competition_locations_tenant_competition")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model competition_sessions {
  id                    String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id        String                   @db.Uuid
  location_id           String?                  @db.Uuid
  session_number        Int
  session_name          String?                  @db.VarChar(255)
  session_date          DateTime                 @db.Date
  start_time            DateTime                 @db.Time(6)
  end_time              DateTime?                @db.Time(6)
  max_entries           Int?
  entry_count           Int?                     @default(0)
  warm_up_time          Unsupported("interval")? @default(dbgenerated("'00:15:00'::interval"))
  head_judge            String?                  @db.Uuid
  judges                Json?                    @default("[]")
  status                String?                  @default("scheduled") @db.VarChar(50)
  created_at            DateTime?                @default(now()) @db.Timestamp(6)
  tenant_id             String                   @db.Uuid
  competition_entries   competition_entries[]
  competitions          competitions             @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users?                   @relation(fields: [head_judge], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competition_locations competition_locations?   @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants               tenants                  @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_competition_sessions_tenant")
  title_rounds          title_rounds[]

  @@index([competition_id], map: "idx_competition_sessions_competition_id")
  @@index([head_judge], map: "idx_competition_sessions_head_judge")
  @@index([location_id], map: "idx_competition_sessions_location_id")
  @@index([tenant_id], map: "idx_competition_sessions_tenant")
  @@index([tenant_id, competition_id], map: "idx_competition_sessions_tenant_competition")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model competitions {
  id                           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                         String                  @db.VarChar(255)
  year                         Int
  description                  String?
  registration_opens           DateTime?               @db.Timestamp(6)
  registration_closes          DateTime?               @db.Timestamp(6)
  competition_start_date       DateTime?               @db.Date
  competition_end_date         DateTime?               @db.Date
  primary_location             String?                 @db.VarChar(255)
  venue_address                String?
  venue_capacity               Int?
  session_count                Int?                    @default(1)
  number_of_judges             Int?                    @default(3)
  entry_fee                    Decimal?                @db.Decimal(10, 2)
  late_fee                     Decimal?                @db.Decimal(10, 2)
  allow_age_overrides          Boolean?                @default(true)
  allow_multiple_entries       Boolean?                @default(true)
  require_video_submissions    Boolean?                @default(false)
  status                       String?                 @default("upcoming") @db.VarChar(50)
  is_public                    Boolean?                @default(true)
  logo_url                     String?
  website                      String?                 @db.VarChar(255)
  contact_email                String?                 @db.VarChar(255)
  contact_phone                String?                 @db.VarChar(50)
  rules_document_url           String?
  created_at                   DateTime?               @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?               @default(now()) @db.Timestamp(6)
  total_reservation_tokens     Int?                    @default(600)
  available_reservation_tokens Int?                    @default(600)
  tokens_override_enabled      Boolean?                @default(false)
  schedule_published_at        DateTime?               @db.Timestamptz(6)
  schedule_locked              Boolean?                @default(false)
  scoring_ranges               Json?                   @default("{\"gold\": [85, 89.9], \"bronze\": [70, 79.9], \"silver\": [80, 84.9], \"platinum\": [95, 100], \"high_gold\": [90, 94.9]}")
  tenant_id                    String                  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  age_division_settings        Json?
  classification_settings      Json?
  entry_fee_settings           Json?
  dance_category_settings      Json?
  scoring_system_settings      Json?
  entry_size_settings          Json?
  title_division_settings      Json?
  special_programs_settings    Json?
  tax_rate                     Decimal?                @default(0.0000) @db.Decimal(5, 4)
  awards                       awards[]
  capacity_ledger              capacity_ledger[]
  competition_entries          competition_entries[]
  competition_locations        competition_locations[]
  competition_sessions         competition_sessions[]
  tenants                      tenants                 @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  documents                    documents[]
  elite_instructors            elite_instructors[]
  email_logs                   email_logs[]
  invoices                     invoices[]
  judges                       judges[]
  rankings                     rankings[]
  reservations                 reservations[]
  title_rounds                 title_rounds[]
  vip_events                   vip_events[]

  @@index([tenant_id], map: "idx_competitions_tenant")
  @@index([competition_start_date, competition_end_date], map: "idx_competitions_dates")
  @@index([status], map: "idx_competitions_status")
  @@index([year], map: "idx_competitions_year")
  @@index([age_division_settings], map: "idx_competitions_age_settings", type: Gin)
  @@index([schedule_locked], map: "idx_competitions_schedule_lock")
  @@index([scoring_system_settings], map: "idx_competitions_scoring_settings", type: Gin)
  @@schema("public")
}

/// Audit trail for all competition capacity changes
/// Negative change_amount = capacity deducted, Positive = capacity refunded
model capacity_ledger {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id String        @db.Uuid
  reservation_id String?       @db.Uuid
  change_amount  Int
  reason         String        @db.VarChar(50)
  notes          String?
  created_at     DateTime      @default(now()) @db.Timestamp(6)
  created_by     String?       @db.Uuid
  tenant_id      String        @db.Uuid
  competitions   competitions  @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users?        @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reservations   reservations? @relation(fields: [reservation_id], references: [id], onUpdate: NoAction)
  tenants        tenants       @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_capacity_ledger_tenant")

  @@unique([reservation_id, reason], map: "capacity_ledger_reservation_reason_unique")
  @@index([competition_id, created_at(sort: Desc)], map: "idx_capacity_ledger_competition")
  @@index([reservation_id], map: "idx_capacity_ledger_reservation")
  @@index([tenant_id], map: "idx_capacity_ledger_tenant")
  @@index([tenant_id, competition_id], map: "idx_capacity_ledger_tenant_competition")
  @@schema("public")
}

model dance_categories {
  id                         String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                       String                   @db.VarChar(100)
  description                String?
  category_award_grouping    String?                  @db.VarChar(255)
  competitive_award_grouping String?                  @db.VarChar(100)
  other_award_grouping       String?                  @db.VarChar(100)
  music_time_limit           Unsupported("interval")?
  requires_specific_attire   Boolean?                 @default(false)
  attire_requirements        String?
  color_code                 String?                  @db.VarChar(7)
  icon_name                  String?                  @db.VarChar(50)
  sort_order                 Int?
  is_active                  Boolean?                 @default(true)
  created_at                 DateTime?                @default(now()) @db.Timestamp(6)
  tenant_id                  String                   @db.Uuid
  competition_entries        competition_entries[]
  tenants                    tenants                  @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  rankings                   rankings[]

  @@unique([name, tenant_id], map: "dance_categories_name_tenant_key")
  @@index([tenant_id], map: "idx_dance_categories_tenant")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model dancers {
  id                      String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studio_id               String               @db.Uuid
  first_name              String               @db.VarChar(100)
  last_name               String               @db.VarChar(100)
  date_of_birth           DateTime?            @db.Date
  age_override            Int?
  gender                  String?              @db.VarChar(20)
  email                   String?              @db.VarChar(255)
  phone                   String?              @db.VarChar(50)
  parent_name             String?              @db.VarChar(255)
  parent_email            String?              @db.VarChar(255)
  parent_phone            String?              @db.VarChar(50)
  emergency_contact_name  String?              @db.VarChar(255)
  emergency_contact_phone String?              @db.VarChar(50)
  medical_conditions      String?
  allergies               String?
  medications             String?
  years_dancing           Int?
  primary_style           String?              @db.VarChar(100)
  skill_level             String?              @db.VarChar(50)
  previous_competitions   Int?                 @default(0)
  registration_number     String?              @unique @db.VarChar(50)
  photo_url               String?
  waiver_signed           Boolean?             @default(false)
  waiver_signed_date      DateTime?            @db.Date
  status                  String?              @default("active") @db.VarChar(50)
  created_at              DateTime?            @default(now()) @db.Timestamp(6)
  updated_at              DateTime?            @default(now()) @db.Timestamp(6)
  tenant_id               String               @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studios                 studios              @relation(fields: [studio_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants                 tenants              @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  entry_participants      entry_participants[]

  @@index([date_of_birth], map: "idx_dancers_age")
  @@index([tenant_id], map: "idx_dancers_tenant")
  @@index([first_name, last_name], map: "idx_dancers_name")
  @@index([studio_id], map: "idx_dancers_studio")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model documents {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filename            String               @db.VarChar(255)
  original_filename   String               @db.VarChar(255)
  file_size           Int?
  mime_type           String?              @db.VarChar(100)
  storage_path        String
  document_type       String               @db.VarChar(50)
  title               String?              @db.VarChar(255)
  description         String?
  competition_id      String?              @db.Uuid
  studio_id           String?              @db.Uuid
  entry_id            String?              @db.Uuid
  uploaded_by         String?              @db.Uuid
  visibility          String?              @default("private") @db.VarChar(20)
  password_protected  Boolean?             @default(false)
  processing_status   String?              @default("ready") @db.VarChar(20)
  processing_error    String?
  created_at          DateTime?            @default(now()) @db.Timestamp(6)
  updated_at          DateTime?            @default(now()) @db.Timestamp(6)
  tenant_id           String               @db.Uuid
  competitions        competitions?        @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition_entries competition_entries? @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  studios             studios?             @relation(fields: [studio_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users?               @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants             tenants              @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_documents_tenant")

  @@index([competition_id], map: "idx_documents_competition")
  @@index([studio_id], map: "idx_documents_studio")
  @@index([document_type], map: "idx_documents_type")
  @@index([entry_id], map: "idx_documents_entry_id")
  @@index([tenant_id], map: "idx_documents_tenant")
  @@index([tenant_id, competition_id], map: "idx_documents_tenant_competition")
  @@index([uploaded_by], map: "idx_documents_uploaded_by")
  @@schema("public")
}

model elite_instructors {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id      String       @db.Uuid
  name                String       @db.VarChar(255)
  credentials         String?
  specialization      String?      @db.VarChar(100)
  bio                 String?
  email               String?      @db.VarChar(255)
  phone               String?      @db.VarChar(50)
  website             String?      @db.VarChar(255)
  assigned_teams      String[]
  session_assignments Json?
  hourly_rate         Decimal?     @db.Decimal(10, 2)
  travel_required     Boolean?     @default(false)
  equipment_needs     String?
  created_at          DateTime?    @default(now()) @db.Timestamp(6)
  competitions        competitions @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([competition_id], map: "idx_elite_instructors_competition_id")
  @@schema("public")
}

model email_templates {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  template_key        String    @unique @db.VarChar(100)
  name                String    @db.VarChar(255)
  description         String?
  subject             String    @db.VarChar(255)
  html_body           String
  text_body           String?
  available_variables Json?
  is_active           Boolean?  @default(true)
  version             Int?      @default(1)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  tenant_id           String    @db.Uuid
  tenants             tenants   @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_email_templates_tenant")

  @@index([tenant_id], map: "idx_email_templates_tenant")
  @@index([tenant_id, template_key], map: "idx_email_templates_tenant_key")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model entry_participants {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entry_id            String              @db.Uuid
  dancer_id           String              @db.Uuid
  dancer_name         String              @db.VarChar(255)
  dancer_age          Int?
  role                String?             @db.VarChar(100)
  display_order       Int?
  costume_size        String?             @db.VarChar(20)
  special_needs       String?
  created_at          DateTime?           @default(now()) @db.Timestamp(6)
  tenant_id           String              @db.Uuid
  dancers             dancers             @relation(fields: [dancer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition_entries competition_entries @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants             tenants             @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_entry_participants_tenant")

  @@unique([entry_id, dancer_id])
  @@index([dancer_id], map: "idx_participants_dancer")
  @@index([entry_id], map: "idx_participants_entry")
  @@index([tenant_id], map: "idx_entry_participants_tenant")
  @@index([tenant_id, entry_id], map: "idx_entry_participants_tenant_entry")
  @@schema("public")
}

model entry_size_categories {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(50)
  min_participants    Int
  max_participants    Int
  base_fee            Decimal?              @db.Decimal(10, 2)
  per_participant_fee Decimal?              @db.Decimal(10, 2)
  sort_order          Int?
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  tenant_id           String                @db.Uuid
  competition_entries competition_entries[]
  tenants             tenants               @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tenant_id], map: "idx_entry_size_categories_tenant")
  @@schema("public")
}

model judges {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?       @db.Uuid
  competition_id      String?       @db.Uuid
  name                String        @db.VarChar(255)
  credentials         String?
  specialization      String?       @db.VarChar(100)
  years_judging       Int?
  certification_level String?       @db.VarChar(50)
  judge_number        Int?
  panel_assignment    String?       @db.VarChar(100)
  sessions            Json?         @default("[]")
  email               String?       @db.VarChar(255)
  phone               String?       @db.VarChar(50)
  confirmed           Boolean?      @default(false)
  checked_in          Boolean?      @default(false)
  created_at          DateTime?     @default(now()) @db.Timestamp(6)
  tenant_id           String        @db.Uuid
  tenants             tenants       @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_judges_tenant")
  competitions        competitions? @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  scores              scores[]

  @@index([competition_id], map: "idx_judges_competition_id")
  @@index([tenant_id], map: "idx_judges_tenant")
  @@index([tenant_id, competition_id], map: "idx_judges_tenant_competition")
  @@index([user_id], map: "idx_judges_user_id")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model rankings {
  id                          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id              String              @db.Uuid
  entry_id                    String              @db.Uuid
  category_id                 String              @db.Uuid
  age_group_id                String              @db.Uuid
  classification_id           String              @db.Uuid
  total_score                 Decimal             @db.Decimal(8, 2)
  average_score               Decimal?            @db.Decimal(6, 2)
  placement                   Int
  category_award_placement    Int?
  competitive_award_placement Int?
  overall_award_placement     Int?
  is_title_winner             Boolean?            @default(false)
  is_glow_off_winner          Boolean?            @default(false)
  special_awards              String[]
  created_at                  DateTime?           @default(now()) @db.Timestamp(6)
  tenant_id                   String              @db.Uuid
  tenants                     tenants             @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_rankings_tenant")
  age_groups                  age_groups          @relation(fields: [age_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dance_categories            dance_categories    @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  classifications             classifications     @relation(fields: [classification_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competitions                competitions        @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition_entries         competition_entries @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category_id, age_group_id, classification_id], map: "idx_rankings_category")
  @@index([competition_id], map: "idx_rankings_competition")
  @@index([age_group_id], map: "idx_rankings_age_group_id")
  @@index([classification_id], map: "idx_rankings_classification_id")
  @@index([entry_id], map: "idx_rankings_entry_id")
  @@index([tenant_id], map: "idx_rankings_tenant")
  @@index([tenant_id, entry_id], map: "idx_rankings_tenant_entry")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model reservations {
  id                                             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studio_id                                      String                 @db.Uuid
  competition_id                                 String                 @db.Uuid
  location_id                                    String?                @db.Uuid
  spaces_requested                               Int
  spaces_confirmed                               Int?                   @default(0)
  agent_first_name                               String?                @db.VarChar(100)
  agent_last_name                                String?                @db.VarChar(100)
  agent_email                                    String?                @db.VarChar(255)
  agent_phone                                    String?                @db.VarChar(50)
  agent_title                                    String?                @db.VarChar(100)
  age_of_consent                                 Boolean?               @default(false)
  waiver_consent                                 Boolean?               @default(false)
  media_consent                                  Boolean?               @default(false)
  deposit_amount                                 Decimal?               @db.Decimal(10, 2)
  total_amount                                   Decimal?               @db.Decimal(10, 2)
  payment_status                                 String?                @default("pending") @db.VarChar(50)
  payment_due_date                               DateTime?              @db.Date
  status                                         String?                @default("pending") @db.VarChar(50)
  internal_notes                                 String?
  public_notes                                   String?
  requested_at                                   DateTime?              @default(now()) @db.Timestamp(6)
  approved_at                                    DateTime?              @db.Timestamp(6)
  approved_by                                    String?                @db.Uuid
  created_at                                     DateTime?              @default(now()) @db.Timestamp(6)
  updated_at                                     DateTime?              @default(now()) @db.Timestamp(6)
  payment_confirmed_by                           String?                @db.Uuid
  payment_confirmed_at                           DateTime?              @db.Timestamptz(6)
  tenant_id                                      String                 @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deposit_paid_at                                DateTime?              @db.Timestamp(6)
  deposit_confirmed_by                           String?                @db.Uuid
  is_closed                                      Boolean?               @default(false)
  capacity_ledger                                capacity_ledger[]
  competition_entries                            competition_entries[]
  invoices                                       invoices[]
  users                                          users?                 @relation(fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  competitions                                   competitions           @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition_locations                          competition_locations? @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_reservations_payment_confirmed_byTousers users?                 @relation("reservations_payment_confirmed_byTousers", fields: [payment_confirmed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  studios                                        studios                @relation(fields: [studio_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants                                        tenants                @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  summaries                                      summaries?

  @@index([competition_id], map: "idx_reservations_competition")
  @@index([tenant_id], map: "idx_reservations_tenant")
  @@index([status], map: "idx_reservations_status")
  @@index([studio_id], map: "idx_reservations_studio")
  @@index([approved_by], map: "idx_reservations_approved_by")
  @@index([location_id], map: "idx_reservations_location_id")
  @@index([payment_confirmed_by], map: "idx_reservations_payment_confirmed_by")
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model invoices {
  id                       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studio_id                String        @db.Uuid
  competition_id           String        @db.Uuid
  reservation_id           String?       @db.Uuid
  line_items               Json          @default("[]")
  subtotal                 Decimal       @default(0) @db.Decimal(10, 2)
  total                    Decimal       @default(0) @db.Decimal(10, 2)
  status                   String        @default("UNPAID") @db.VarChar(50)
  created_at               DateTime?     @default(now()) @db.Timestamp(6)
  updated_at               DateTime?     @default(now()) @db.Timestamp(6)
  tenant_id                String        @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stripe_payment_intent_id String?       @db.VarChar(255)
  stripe_customer_id       String?       @db.VarChar(255)
  paid_at                  DateTime?     @db.Timestamp(6)
  payment_method           String?       @db.VarChar(50)
  credit_amount            Decimal?      @default(0) @db.Decimal(10, 2)
  credit_reason            String?
  tax_rate                 Decimal?      @default(13.00) @db.Decimal(5, 2)
  is_locked                Boolean?      @default(false)
  competitions             competitions  @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reservations             reservations? @relation(fields: [reservation_id], references: [id], onUpdate: NoAction)
  studios                  studios       @relation(fields: [studio_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants                  tenants       @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([competition_id], map: "idx_invoices_competition")
  @@index([tenant_id], map: "idx_invoices_tenant")
  @@index([reservation_id], map: "idx_invoices_reservation")
  @@index([status], map: "idx_invoices_status")
  @@index([studio_id], map: "idx_invoices_studio")
  @@index([stripe_payment_intent_id], map: "idx_invoices_stripe_payment_intent")
  @@index([stripe_customer_id], map: "idx_invoices_stripe_customer")
  @@index([paid_at], map: "idx_invoices_paid_at")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model scores {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entry_id              String              @db.Uuid
  judge_id              String              @db.Uuid
  technical_score       Decimal?            @db.Decimal(5, 2)
  artistic_score        Decimal?            @db.Decimal(5, 2)
  performance_score     Decimal?            @db.Decimal(5, 2)
  overall_score         Decimal?            @db.Decimal(5, 2)
  total_score           Decimal             @db.Decimal(6, 2)
  placement             Int?
  comments              String?
  strengths             String?
  areas_for_improvement String?
  scored_at             DateTime?           @default(now()) @db.Timestamp(6)
  modified_at           DateTime?           @db.Timestamp(6)
  is_final              Boolean?            @default(false)
  created_at            DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?           @default(now()) @db.Timestamptz(6)
  tenant_id             String              @db.Uuid
  tenants               tenants             @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_scores_tenant")
  competition_entries   competition_entries @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  judges                judges              @relation(fields: [judge_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([entry_id, judge_id])
  @@index([entry_id], map: "idx_scores_entry")
  @@index([judge_id], map: "idx_scores_judge")
  @@index([created_at], map: "idx_scores_created")
  @@index([tenant_id], map: "idx_scores_tenant")
  @@index([tenant_id, entry_id], map: "idx_scores_tenant_entry")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model studios {
  id                               String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_id                         String                @db.Uuid
  code                             String?               @unique @db.VarChar(5)
  public_code                      String                @unique @db.VarChar(5) /// @description Client-facing 5-character lookup code. Display only - never use in database relations. All FKs must use id (UUID).
  name                             String                @db.VarChar(255)
  address1                         String?               @db.VarChar(255)
  address2                         String?               @db.VarChar(255)
  city                             String?               @db.VarChar(100)
  province                         String?               @db.VarChar(50)
  postal_code                      String?               @db.VarChar(20)
  country                          String?               @default("Canada") @db.VarChar(50)
  phone                            String?               @db.VarChar(50)
  fax                              String?               @db.VarChar(50)
  email                            String?               @db.VarChar(255)
  website                          String?               @db.VarChar(255)
  contact_name                     String?               @db.VarChar(255)
  contact_phone                    String?               @db.VarChar(50)
  contact_email                    String?               @db.VarChar(255)
  contact_title                    String?               @db.VarChar(100)
  business_number                  String?               @db.VarChar(50)
  tax_number                       String?               @db.VarChar(50)
  account_name                     String?               @db.VarChar(255)
  established_year                 Int?
  student_count                    Int?
  instructor_count                 Int?
  comments                         String?
  status                           String?               @default("pending") @db.VarChar(50)
  verified_at                      DateTime?             @db.Timestamp(6)
  verified_by                      String?               @db.Uuid
  logo_url                         String?
  social_media                     Json?                 @default("{}")
  settings                         Json?                 @default("{}")
  created_at                       DateTime?             @default(now()) @db.Timestamp(6)
  updated_at                       DateTime?             @default(now()) @db.Timestamp(6)
  tenant_id                        String                @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  internal_notes                   String?
  consent_photo_video              DateTime?             @db.Timestamptz(6)
  consent_legal_info               DateTime?             @db.Timestamptz(6)
  consent_marketing                DateTime?             @db.Timestamptz(6)
  consent_data_processing          DateTime?             @db.Timestamptz(6)
  activity_logs                    activity_logs[]
  competition_entries              competition_entries[]
  dancers                          dancers[]
  documents                        documents[]
  email_logs                       email_logs[]
  invoices                         invoices[]
  reservations                     reservations[]
  users_studios_owner_idTousers    users                 @relation("studios_owner_idTousers", fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants                          tenants               @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  users_studios_verified_byTousers users?                @relation("studios_verified_byTousers", fields: [verified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([tenant_id], map: "idx_studios_tenant")
  @@index([code], map: "idx_studios_code")
  @@index([owner_id], map: "idx_studios_owner")
  @@index([status], map: "idx_studios_status")
  @@index([verified_by], map: "idx_studios_verified_by")
  @@schema("public")
}

model system_settings {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key              String    @unique @db.VarChar(100)
  value            Json
  description      String?
  category         String?   @db.VarChar(50)
  data_type        String    @db.VarChar(20)
  validation_rules Json?
  is_public        Boolean?  @default(false)
  requires_admin   Boolean?  @default(true)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)

  @@schema("public")
}

/// Stores configurable competition parameters and rules
/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model competition_settings {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  setting_category String
  setting_key      String
  setting_value    Json
  display_order    Int      @default(0)
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  deprecated       Boolean? @default(false)

  @@unique([setting_category, setting_key], map: "competition_settings_category_key_unique")
  @@index([is_active], map: "idx_competition_settings_active")
  @@index([setting_category], map: "idx_competition_settings_category")
  @@index([display_order], map: "idx_competition_settings_display_order")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model title_rounds {
  id                   String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id       String                   @db.Uuid
  round_type           String                   @db.VarChar(50)
  name                 String                   @db.VarChar(255)
  description          String?
  session_id           String?                  @db.Uuid
  scheduled_date       DateTime?                @db.Date
  scheduled_time       DateTime?                @db.Time(6)
  duration             Unsupported("interval")?
  min_score_required   Decimal?                 @db.Decimal(6, 2)
  max_participants     Int?
  categories           Json?
  interview_duration   Unsupported("interval")?
  improvisation_style  String?                  @db.VarChar(100)
  special_requirements String?
  status               String?                  @default("scheduled") @db.VarChar(50)
  created_at           DateTime?                @default(now()) @db.Timestamp(6)
  tenant_id            String                   @db.Uuid
  tenants              tenants                  @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_title_rounds_tenant")
  competitions         competitions             @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition_sessions competition_sessions?    @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([competition_id], map: "idx_title_rounds_competition_id")
  @@index([session_id], map: "idx_title_rounds_session_id")
  @@index([tenant_id], map: "idx_title_rounds_tenant")
  @@index([tenant_id, competition_id], map: "idx_title_rounds_tenant_competition")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_profiles {
  id                       String                 @id @db.Uuid
  first_name               String?                @db.VarChar(100)
  last_name                String?                @db.VarChar(100)
  phone                    String?                @db.VarChar(50)
  timezone                 String?                @default("America/Toronto") @db.VarChar(50)
  notification_preferences Json?                  @default("{\"sms\": false, \"email\": true, \"competition_updates\": true}")
  created_at               DateTime?              @default(now()) @db.Timestamp(6)
  updated_at               DateTime?              @default(now()) @db.Timestamp(6)
  role                     user_role?             @default(studio_director)
  tenant_id                String?                @db.Uuid
  two_factor_enabled       Boolean?               @default(false)
  two_factor_secret        String?
  two_factor_backup_codes  Json?
  two_factor_verified_at   DateTime?              @db.Timestamp(6)
  activity_logs            activity_logs[]
  email_preferences        email_preferences[]
  two_factor_audit_log     two_factor_audit_log[]
  users                    users                  @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants                  tenants?               @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([tenant_id], map: "idx_user_profiles_tenant")
  @@schema("public")
}

/// Email notification preferences for users
model email_preferences {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String        @db.Uuid
  email_type    email_type
  enabled       Boolean       @default(true)
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  updated_at    DateTime      @default(now()) @db.Timestamptz(6)
  tenant_id     String        @db.Uuid
  user_profiles user_profiles @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants       tenants       @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_email_preferences_tenant")

  @@unique([user_id, email_type], map: "email_preferences_user_email_type_unique")
  @@index([user_id], map: "idx_email_preferences_user_id")
  @@index([tenant_id], map: "idx_email_preferences_tenant")
  @@index([tenant_id, user_id], map: "idx_email_preferences_tenant_user")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model vip_events {
  id                       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  competition_id           String       @db.Uuid
  event_type               String       @db.VarChar(100)
  name                     String       @db.VarChar(255)
  description              String?
  venue_name               String?      @db.VarChar(255)
  venue_address            String?
  event_date               DateTime?    @db.Date
  start_time               DateTime?    @db.Time(6)
  end_time                 DateTime?    @db.Time(6)
  max_participants         Int?
  participant_count        Int?         @default(0)
  ticket_price             Decimal?     @db.Decimal(10, 2)
  dress_code               String?      @db.VarChar(100)
  included_amenities       String[]
  special_instructions     String?
  age_restrictions         String?      @db.VarChar(100)
  requires_waiver          Boolean?     @default(false)
  requires_advance_booking Boolean?     @default(true)
  status                   String?      @default("scheduled") @db.VarChar(50)
  created_at               DateTime?    @default(now()) @db.Timestamp(6)
  tenant_id                String       @db.Uuid
  tenants                  tenants      @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_vip_events_tenant")
  competitions             competitions @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([competition_id], map: "idx_vip_events_competition_id")
  @@index([tenant_id], map: "idx_vip_events_tenant")
  @@index([tenant_id, competition_id], map: "idx_vip_events_tenant_competition")
  @@schema("public")
}

model email_logs {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  template_type   String        @db.VarChar(50)
  recipient_email String        @db.VarChar(255)
  subject         String        @db.VarChar(500)
  studio_id       String?       @db.Uuid
  competition_id  String?       @db.Uuid
  success         Boolean?      @default(true)
  error_message   String?
  sent_at         DateTime?     @default(now()) @db.Timestamp(6)
  tenant_id       String        @db.Uuid
  competitions    competitions? @relation(fields: [competition_id], references: [id], onUpdate: NoAction, map: "fk_email_logs_competition")
  studios         studios?      @relation(fields: [studio_id], references: [id], onUpdate: NoAction, map: "fk_email_logs_studio")
  tenants         tenants       @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_email_logs_tenant")

  @@index([competition_id], map: "idx_email_logs_competition_id")
  @@index([sent_at], map: "idx_email_logs_sent_at")
  @@index([studio_id], map: "idx_email_logs_studio_id")
  @@index([tenant_id], map: "idx_email_logs_tenant")
  @@index([tenant_id, competition_id], map: "idx_email_logs_tenant_competition")
  @@schema("public")
}

/// Multi-tenant table for client isolation
model tenants {
  id                      String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                    String                  @unique @db.VarChar(50)
  subdomain               String                  @unique @db.VarChar(50)
  name                    String                  @db.VarChar(255)
  branding                Json                    @default("{}")
  created_at              DateTime                @default(now()) @db.Timestamp(6)
  updated_at              DateTime                @default(now()) @db.Timestamp(6)
  age_division_settings   Json?
  classification_settings Json?
  entry_fee_settings      Json?
  dance_category_settings Json?
  scoring_system_settings Json?
  entry_size_settings     Json?
  award_settings          Json?
  email_from              String?
  email_from_name         String?
  mailgun_domain          String?
  email_template_footer   String?
  activity_logs           activity_logs[]
  age_groups              age_groups[]
  award_types             award_types[]
  awards                  awards[]
  capacity_ledger         capacity_ledger[]
  classifications         classifications[]
  competition_entries     competition_entries[]
  competition_locations   competition_locations[]
  competition_sessions    competition_sessions[]
  competitions            competitions[]
  dance_categories        dance_categories[]
  dancers                 dancers[]
  documents               documents[]
  email_logs              email_logs[]
  email_preferences       email_preferences[]
  email_queue             email_queue[]
  email_templates         email_templates[]
  entry_participants      entry_participants[]
  entry_size_categories   entry_size_categories[]
  invoices                invoices[]
  judges                  judges[]
  rankings                rankings[]
  reservations            reservations[]
  scores                  scores[]
  scoring_tiers           scoring_tiers[]
  studios                 studios[]
  summaries               summaries[]
  summary_entries         summary_entries[]
  title_rounds            title_rounds[]
  user_profiles           user_profiles[]
  vip_events              vip_events[]

  @@index([age_division_settings], map: "idx_tenants_age_settings", type: Gin)
  @@index([entry_size_settings], map: "idx_tenants_entry_size_settings", type: Gin)
  @@schema("public")
}

/// Audit trail for submitted routine summaries per reservation
/// Required by PHASE1_SPEC.md lines 611-616
model summaries {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reservation_id  String            @unique(map: "summaries_reservation_unique") @db.Uuid
  entries_used    Int
  entries_unused  Int
  submitted_at    DateTime          @default(now()) @db.Timestamptz(6)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  tenant_id       String            @db.Uuid
  tenants         tenants           @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_summaries_tenant")
  reservations    reservations      @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  summary_entries summary_entries[]

  @@index([tenant_id], map: "idx_summaries_tenant")
  @@index([reservation_id], map: "idx_summaries_reservation")
  @@index([submitted_at], map: "idx_summaries_submitted_at")
  @@index([tenant_id, reservation_id], map: "idx_summaries_tenant_reservation")
  @@schema("public")
}

/// Immutable snapshots of entries at summary submission time
/// Required by PHASE1_SPEC.md lines 619-624
model summary_entries {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  summary_id          String              @db.Uuid
  entry_id            String              @db.Uuid
  snapshot            Json
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  tenant_id           String              @db.Uuid
  tenants             tenants             @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_summary_entries_tenant")
  competition_entries competition_entries @relation(fields: [entry_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  summaries           summaries           @relation(fields: [summary_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([summary_id, entry_id], map: "summary_entries_unique")
  @@index([tenant_id], map: "idx_summary_entries_tenant")
  @@index([summary_id], map: "idx_summary_entries_summary")
  @@index([entry_id], map: "idx_summary_entries_entry")
  @@index([tenant_id, entry_id], map: "idx_summary_entries_tenant_entry")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_authorizations {
  id                    String                     @id @db.Uuid
  authorization_id      String                     @unique
  client_id             String                     @db.Uuid
  user_id               String?                    @db.Uuid
  redirect_uri          String
  scope                 String
  state                 String?
  resource              String?
  code_challenge        String?
  code_challenge_method code_challenge_method?
  response_type         oauth_response_type        @default(code)
  status                oauth_authorization_status @default(pending)
  authorization_code    String?                    @unique
  created_at            DateTime                   @default(now()) @db.Timestamptz(6)
  expires_at            DateTime                   @default(dbgenerated("(now() + '00:03:00'::interval)")) @db.Timestamptz(6)
  approved_at           DateTime?                  @db.Timestamptz(6)
  oauth_clients         oauth_clients              @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users?                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_consents {
  id            String        @id @db.Uuid
  user_id       String        @db.Uuid
  client_id     String        @db.Uuid
  scopes        String
  granted_at    DateTime      @default(now()) @db.Timestamptz(6)
  revoked_at    DateTime?     @db.Timestamptz(6)
  oauth_clients oauth_clients @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, client_id], map: "oauth_consents_user_client_unique")
  @@index([user_id, granted_at(sort: Desc)], map: "oauth_consents_user_order_idx")
  @@schema("auth")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model activity_logs {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String        @db.Uuid
  studio_id     String?       @db.Uuid
  action        String
  entity_type   String
  entity_id     String?       @db.Uuid
  entity_name   String?
  details       Json?
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  tenant_id     String        @db.Uuid
  studios       studios?      @relation(fields: [studio_id], references: [id], onUpdate: NoAction)
  user_profiles user_profiles @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants       tenants       @relation(fields: [tenant_id], references: [id], onUpdate: NoAction, map: "fk_activity_logs_tenant")

  @@index([created_at(sort: Desc)], map: "idx_activity_logs_created_at")
  @@index([entity_type, entity_id], map: "idx_activity_logs_entity")
  @@index([studio_id], map: "idx_activity_logs_studio_id")
  @@index([tenant_id], map: "idx_activity_logs_tenant")
  @@index([tenant_id, user_id], map: "idx_activity_logs_tenant_user")
  @@index([user_id], map: "idx_activity_logs_user_id")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model email_queue {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id       String    @db.Uuid
  user_id         String?   @db.Uuid
  email_type      String
  recipient_email String
  template_data   Json      @default("{}")
  status          String    @default("pending")
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  sent_at         DateTime? @db.Timestamptz(6)
  error           String?
  retry_count     Int       @default(0)
  tenants         tenants   @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([tenant_id], map: "idx_email_queue_tenant_id")
  @@index([user_id], map: "idx_email_queue_user_id")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model scoring_tiers {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String    @db.Uuid
  name       String    @db.VarChar(255)
  min_score  Decimal   @db.Decimal(5, 2)
  max_score  Decimal   @db.Decimal(5, 2)
  color      String?   @db.VarChar(7)
  sort_order Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  tenants    tenants   @relation(fields: [tenant_id], references: [id], onUpdate: NoAction)

  @@unique([tenant_id, name])
  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model two_factor_audit_log {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String        @db.Uuid
  action        String        @db.VarChar(50)
  success       Boolean?      @default(true)
  ip_address    String?       @db.VarChar(45)
  user_agent    String?
  timestamp     DateTime?     @default(now()) @db.Timestamp(6)
  user_profiles user_profiles @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([action], map: "idx_2fa_audit_action")
  @@index([timestamp(sort: Desc)], map: "idx_2fa_audit_timestamp")
  @@index([user_id], map: "idx_2fa_audit_user")
  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum oauth_registration_type {
  dynamic
  manual

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}

enum user_role {
  studio_director
  competition_director
  super_admin

  @@schema("public")
}

enum email_type {
  reservation_submitted
  reservation_approved
  reservation_rejected
  routine_summary_submitted
  invoice_received
  entry_submitted
  payment_confirmed
  studio_profile_submitted
  missing_music

  @@schema("public")
}

enum oauth_authorization_status {
  pending
  approved
  denied
  expired

  @@schema("auth")
}

enum oauth_client_type {
  public
  confidential

  @@schema("auth")
}

enum oauth_response_type {
  code

  @@schema("auth")
}
